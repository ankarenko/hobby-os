1. cat diary/day1.txt crashes with page fault
cd diary && cd .. && cd ..

pmemsave 0x674000 4096 out.mem

echo "pmemsave 0x674000 4096 home/sergey/Desktop/os/out.mem" | sudo socat - unix-connect:qemu-monitor-socket


// dirent
https://www.reddit.com/r/osdev/comments/139pet/porting_newlib/


// docker run
docker run -it --rm -v $PWD/build:/src/build  -v $PWD:/os -v $PWD/ports/newlib/myos:/src/newlib-2.5.0/newlib/libc/sys/myos -v $PWD/sysroot/:/os/sysroot os_tools
// docker build
docker build -f ./toolchain/Dockerfile -t os_tools .


// for signals
https://github.com/eblot/newlib/blob/master/newlib/libc/signal/signal.c
https://wiki.osdev.org/Porting_Newlib#Signal_handling
https://github.com/stevej/osdev/blob/master/toolchain/patches/newlib/toaru/syscalls.c
./configure --bindir=$PWD/bin --mandir=$PWD/man --host=i686-myos CPPFLAGS=-DHAVE_KILLPG=1


https://forum.osdev.org/viewtopic.php?t=27005&p=226203

https://www.gnu.org/software/make/manual/make.html#Directory-Variables

// possible libc implementations 
// dietlib ?????





https://github.com/torvalds/linux/blob/e326df53af0021f48a481ce9d489efda636c2dc6/kernel/groups.c#L161???

THERE IS A BUG WITH WAKING UP A THREAD THAT HAS 
ACQUIRED SOME LOCK BUT NEEDS TO HANDLE SIGNAL!




// void
setjobctl(int on)




void
opentrace(void)
{
	char s[100];
#ifdef O_APPEND
	int flags;
#endif

	if (debug != 1) {
		if (tracefile)
			fflush(tracefile);
		/* leave open because libedit might be using it */
		return;
	}
#ifdef not_this_way
	{
		char *p;
		if ((p = getenv(homestr)) == NULL) {
			if (geteuid() == 0)
				p = "/";
			else
				p = "/tmp";
		}
		scopy(p, s);
		strcat(s, "./dev/serial0");
	}
#else
	scopy("./dev/serial0", s);
#endif /* not_this_way */
	if (tracefile) {
#ifndef __KLIBC__
		if (!freopen(s, "a", tracefile)) {
#else
		if (!(!fclose(tracefile) && (tracefile = fopen(s, "a")))) {
#endif /* __KLIBC__ */
			fprintf(stderr, "Can't re-open %s\n", s);
			debug = 0;
			return;
		}
	} else {
		if ((tracefile = fopen(s, "a")) == NULL) {
			fprintf(stderr, "Can't open %s\n", s);
			debug = 0;
			return;
		}
	}
#ifdef O_APPEND
	if ((flags = fcntl(fileno(tracefile), F_GETFL, 0)) >= 0)
		fcntl(fileno(tracefile), F_SETFL, flags | O_APPEND);
#endif
#ifndef __KLIBC__
	setlinebuf(tracefile);
#endif /* __KLIBC__ */
	fputs("\nTracing started.\n", tracefile);
}
#endif /* DEBUG */
